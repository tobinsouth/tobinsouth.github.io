name: Pre-deployment Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  checklist:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run checks and post results
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            
            let checks = [];
            let allPassed = true;
            
            // Check 1: Build succeeds
            try {
              execSync('npm run build', { stdio: 'pipe' });
              checks.push('✅ Build succeeds');
            } catch (e) {
              checks.push('❌ Build fails');
              allPassed = false;
            }
            
            // Check 2: No console.log in production code
            try {
              const result = execSync('grep -r "console.log" --include="*.js" --include="*.html" --exclude-dir=node_modules --exclude-dir=_site . || true', { encoding: 'utf8' });
              if (result.trim()) {
                checks.push('⚠️ console.log statements found (consider removing)');
              } else {
                checks.push('✅ No console.log statements');
              }
            } catch (e) {
              checks.push('✅ No console.log statements');
            }
            
            // Check 3: package-lock.json exists
            if (fs.existsSync('package-lock.json')) {
              checks.push('✅ package-lock.json exists');
            } else {
              checks.push('❌ package-lock.json missing');
              allPassed = false;
            }
            
            // Check 4: _site directory created
            if (fs.existsSync('_site')) {
              const files = fs.readdirSync('_site');
              checks.push(`✅ Build output created (${files.length} items)`);
            } else {
              checks.push('❌ Build output missing');
              allPassed = false;
            }
            
            // Check 5: Critical files exist
            const criticalFiles = ['_site/index.html', '_site/robots.txt'];
            let missingFiles = [];
            for (const file of criticalFiles) {
              if (!fs.existsSync(file)) {
                missingFiles.push(file);
              }
            }
            if (missingFiles.length === 0) {
              checks.push('✅ All critical files present');
            } else {
              checks.push(`❌ Missing files: ${missingFiles.join(', ')}`);
              allPassed = false;
            }
            
            // Check 6: File sizes
            if (fs.existsSync('_site')) {
              const getDirSize = (dir) => {
                let size = 0;
                const files = fs.readdirSync(dir);
                for (const file of files) {
                  const path = `${dir}/${file}`;
                  const stat = fs.statSync(path);
                  if (stat.isDirectory()) {
                    size += getDirSize(path);
                  } else {
                    size += stat.size;
                  }
                }
                return size;
              };
              const sizeInMB = getDirSize('_site') / (1024 * 1024);
              if (sizeInMB < 50) {
                checks.push(`✅ Build size reasonable (${sizeInMB.toFixed(2)} MB)`);
              } else {
                checks.push(`⚠️ Large build size (${sizeInMB.toFixed(2)} MB)`);
              }
            }
            
            // Create comment
            const comment = `## 🚀 Pre-deployment Checklist
            
            ${checks.join('\n')}
            
            ---
            ${allPassed ? '✅ **All checks passed!** Ready for deployment.' : '⚠️ **Some checks need attention.** Please review before merging.'}
            
            <details>
            <summary>Deployment Info</summary>
            
            - **Node Version:** ${process.version}
            - **Branch:** ${{ github.head_ref }}
            - **Commit:** ${{ github.event.pull_request.head.sha }}
            
            </details>`;
            
            // Post or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pre-deployment Checklist')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
            if (!allPassed) {
              core.setFailed('Some pre-deployment checks failed');
            }